//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoftGame.SoftGameQuerySvc {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GamesInfo", Namespace="http://schemas.datacontract.org/2004/07/SoftGameEFDataModel.Entities")]
    [System.SerializableAttribute()]
    public partial class GamesInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GameIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GameNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameId {
            get {
                return this.GameIdField;
            }
            set {
                if ((this.GameIdField.Equals(value) != true)) {
                    this.GameIdField = value;
                    this.RaisePropertyChanged("GameId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameName {
            get {
                return this.GameNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GameNameField, value) != true)) {
                    this.GameNameField = value;
                    this.RaisePropertyChanged("GameName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SoftGameQuerySvc.ISoftGameQueryService")]
    public interface ISoftGameQueryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftGameQueryService/DoWork", ReplyAction="http://tempuri.org/ISoftGameQueryService/DoWorkResponse")]
        string DoWork(string username, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftGameQueryService/DoWork", ReplyAction="http://tempuri.org/ISoftGameQueryService/DoWorkResponse")]
        System.Threading.Tasks.Task<string> DoWorkAsync(string username, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftGameQueryService/GetAllGames", ReplyAction="http://tempuri.org/ISoftGameQueryService/GetAllGamesResponse")]
        SoftGame.SoftGameQuerySvc.GamesInfo[] GetAllGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISoftGameQueryService/GetAllGames", ReplyAction="http://tempuri.org/ISoftGameQueryService/GetAllGamesResponse")]
        System.Threading.Tasks.Task<SoftGame.SoftGameQuerySvc.GamesInfo[]> GetAllGamesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISoftGameQueryServiceChannel : SoftGame.SoftGameQuerySvc.ISoftGameQueryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SoftGameQueryServiceClient : System.ServiceModel.ClientBase<SoftGame.SoftGameQuerySvc.ISoftGameQueryService>, SoftGame.SoftGameQuerySvc.ISoftGameQueryService {
        
        public SoftGameQueryServiceClient() {
        }
        
        public SoftGameQueryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SoftGameQueryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoftGameQueryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoftGameQueryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DoWork(string username, string pwd) {
            return base.Channel.DoWork(username, pwd);
        }
        
        public System.Threading.Tasks.Task<string> DoWorkAsync(string username, string pwd) {
            return base.Channel.DoWorkAsync(username, pwd);
        }
        
        public SoftGame.SoftGameQuerySvc.GamesInfo[] GetAllGames() {
            return base.Channel.GetAllGames();
        }
        
        public System.Threading.Tasks.Task<SoftGame.SoftGameQuerySvc.GamesInfo[]> GetAllGamesAsync() {
            return base.Channel.GetAllGamesAsync();
        }
    }
}
